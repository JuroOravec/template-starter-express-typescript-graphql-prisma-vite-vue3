version: '3'

services:
  nginx:
    image: nginx:1.24-alpine
    ports:
      - '80:80'
      - '443:443'
    restart: always
    volumes:
      - ./volumes/nginx:/etc/nginx/conf.d
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/certbot
    # Reload newly obtained/renewed certificates
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    restart: always
    volumes:
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/certbot
    # Check if certificate is up for renewal every 12 hours as recommended by Letâ€™s Encrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  postgres:
    # Using v14 because I couldn't get pg_dump for v15 for cron container.
    # (it uses Amazon Linux 2, and that had only postgres v14 available)
    image: postgres:14.8-alpine
    restart: always
    ports:
      # Allow connection only from other containers and host
      - '127.0.0.1:5432:5432'
    volumes:
      - ./volumes/pg:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${SERVER_DB_USER}
      POSTGRES_PASSWORD: ${SERVER_DB_PWD}
      POSTGRES_DB: ${SERVER_DB_NAME}

  redis:
    image: redis:7.0-alpine
    restart: always

  cron:
    build: ./cron
    image: ${CRON_IMAGE_TAG}
    container_name: cron
    restart: always
    volumes:
      - ./volumes/cron:/etc/supercronic
    command: supercronic -debug -sentry-dsn ${CRON_SENTRY_DNS} /etc/supercronic/crontab
    environment:
      POSTGRES_DB_URL: ${SERVER_DB_URL}
      POSTGRES_DB_NAME: ${SERVER_DB_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_S3_BACKUP_DB_KEY}
      AWS_SECRET_ACCESS_KEY: ${AWS_S3_BACKUP_DB_PWD}
      BACKUP_BUCKET_NAME: ${BACKUP_BUCKET_NAME}
      # Used for knowing which env it's in
      APP_ENV: ${APP_ENV}

  node_server:
    build: .
    image: ${NODE_SERVER_IMAGE_TAG}
    expose:
      - '3000' # Expose only to nginx
    ports:
      - '25:25'
    restart: always
    command: npm run start
    environment:
      NODE_ENV: ${NODE_ENV}
      APP_ENV: ${APP_ENV}
      MAIL_RELAY_PASSWORD: ${MAIL_RELAY_PASSWORD}
      # Used by Prisma
      SERVER_DB_URL: ${SERVER_DB_URL}
    depends_on:
      - postgres
      - redis

  # See https://docker-mailserver.github.io/docker-mailserver/latest/examples/tutorials/basic-installation/#using-dms-as-a-local-mail-relay-for-containers
  # mailserver:
  #   # NOTE: Do not upgrade beyond 12.0.
  #   # This MR broke the option to forward email
  #   # https://github.com/docker-mailserver/docker-mailserver/pull/3270
  #   image: ghcr.io/docker-mailserver/docker-mailserver:12.0
  #   container_name: mailserver
  #   # Provide the FQDN of your mail server here (Your DNS MX record should point to this value)
  #   hostname: system-mail.example.com
  #   env_file: mailserver.env
  #   environment:
  #     - RELAY_PASSWORD=${MAIL_RELAY_PASSWORD}
  #   # More information about the mail-server ports:
  #   # https://docker-mailserver.github.io/docker-mailserver/latest/config/security/understanding-the-ports/
  #   # To avoid conflicts with yaml base-60 float, DO NOT remove the quotation marks.
  #   ports:
  #     - "25:25"    # SMTP  (explicit TLS => STARTTLS)
  #     - "143:143"  # IMAP4 (explicit TLS => STARTTLS)
  #     - "465:465"  # ESMTP (implicit TLS)
  #     - "587:587"  # ESMTP (explicit TLS => STARTTLS)
  #     - "993:993"  # IMAP4 (implicit TLS)
  #   volumes:
  #     - ./volumes/dms/mail-data/:/var/mail/
  #     - ./volumes/dms/mail-state/:/var/mail-state/
  #     - ./volumes/dms/mail-logs/:/var/log/mail/
  #     - ./volumes/dms/config/:/tmp/docker-mailserver/
  #     - /etc/localtime:/etc/localtime:ro
  #     - ./volumes/certbot/conf:/etc/letsencrypt
  #   restart: always
  #   stop_grace_period: 1m
  #   cap_add:
  #     - NET_ADMIN # For Fail2Ban to work
  #   healthcheck:
  #     test: "ss --listening --tcp | grep -P 'LISTEN.+:smtp' || exit 1"
  #     timeout: 3s
  #     retries: 0