import type { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };

/* eslint-disable */
/* This file is autogenerated, see codegen.ts */

import type { ResolverContext } from '@/apis/graphql/types'
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string | number; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  AccountNumber: { input: any; output: any; }
  BigInt: { input: any; output: any; }
  Byte: { input: any; output: any; }
  CountryCode: { input: string; output: string; }
  Cuid: { input: any; output: any; }
  Currency: { input: string; output: string; }
  DID: { input: any; output: any; }
  Date: { input: any; output: any; }
  DateTime: { input: string; output: string; }
  DateTimeISO: { input: any; output: any; }
  DeweyDecimal: { input: any; output: any; }
  Duration: { input: any; output: any; }
  EmailAddress: { input: string; output: string; }
  GUID: { input: any; output: any; }
  HSL: { input: any; output: any; }
  HSLA: { input: any; output: any; }
  HexColorCode: { input: any; output: any; }
  Hexadecimal: { input: any; output: any; }
  IBAN: { input: any; output: any; }
  IP: { input: any; output: any; }
  IPCPatent: { input: any; output: any; }
  IPv4: { input: any; output: any; }
  IPv6: { input: any; output: any; }
  ISBN: { input: any; output: any; }
  ISO8601Duration: { input: any; output: any; }
  JSON: { input: any; output: any; }
  JSONObject: { input: any; output: any; }
  JWT: { input: any; output: any; }
  LCCSubclass: { input: any; output: any; }
  Latitude: { input: any; output: any; }
  LocalDate: { input: any; output: any; }
  LocalDateTime: { input: any; output: any; }
  LocalEndTime: { input: any; output: any; }
  LocalTime: { input: any; output: any; }
  Locale: { input: any; output: any; }
  Long: { input: any; output: any; }
  Longitude: { input: any; output: any; }
  MAC: { input: any; output: any; }
  NegativeFloat: { input: any; output: any; }
  NegativeInt: { input: any; output: any; }
  NonEmptyString: { input: any; output: any; }
  NonNegativeFloat: { input: number; output: number; }
  NonNegativeInt: { input: number; output: number; }
  NonPositiveFloat: { input: any; output: any; }
  NonPositiveInt: { input: any; output: any; }
  ObjectID: { input: any; output: any; }
  PhoneNumber: { input: string; output: string; }
  Port: { input: any; output: any; }
  PositiveFloat: { input: any; output: any; }
  PositiveInt: { input: any; output: any; }
  PostalCode: { input: any; output: any; }
  RGB: { input: any; output: any; }
  RGBA: { input: any; output: any; }
  RoutingNumber: { input: any; output: any; }
  SafeInt: { input: any; output: any; }
  SemVer: { input: any; output: any; }
  Time: { input: any; output: any; }
  TimeZone: { input: any; output: any; }
  Timestamp: { input: any; output: any; }
  URL: { input: string; output: string; }
  USCurrency: { input: any; output: any; }
  UUID: { input: any; output: any; }
  UnsignedFloat: { input: any; output: any; }
  UnsignedInt: { input: any; output: any; }
  UtcOffset: { input: any; output: any; }
  Void: { input: any; output: any; }
};

export type GqlAdminMutation = {
  __typename?: 'AdminMutation';
  hello?: Maybe<Scalars['String']['output']>;
};

export type GqlAdminQuery = {
  __typename?: 'AdminQuery';
  hello?: Maybe<Scalars['String']['output']>;
};

/**
 * Interface for cursor pagination connection.
 *
 * This interface follows the GraphQL Cursor Connections Specification. See https://relay.dev/graphql/connections.htm#sec-Connection-Types
 */
export type GqlConnection = {
  edges: Array<GqlEdge>;
  pageInfo: GqlPageInfo;
};

/**
 * Partial interface for cursor pagination edge.
 *
 * The 'node' field is intentionally omitted as that differs between implementations.
 *
 * This interface follows the GraphQL Cursor Connections Specification. See https://relay.dev/graphql/connections.htm#sec-Edge-Types
 */
export type GqlEdge = {
  cursor: Scalars['String']['output'];
};

export type GqlMeMutation = {
  __typename?: 'MeMutation';
  hello?: Maybe<Scalars['String']['output']>;
  updateUserSettings?: Maybe<GqlUserSettings>;
};


export type GqlMeMutationUpdateUserSettingsArgs = {
  userSettings: GqlUserSettingsUpdateInput;
};

export type GqlMeQuery = {
  __typename?: 'MeQuery';
  hello?: Maybe<Scalars['String']['output']>;
  user?: Maybe<GqlUser>;
};

export type GqlMutation = {
  __typename?: 'Mutation';
  /** Mutations available to authenticated admin user. */
  admin?: Maybe<GqlAdminMutation>;
  hello?: Maybe<Scalars['String']['output']>;
  /** Mutations available to authenticated user. */
  me?: Maybe<GqlMeMutation>;
};

export type GqlPageInfo = {
  __typename?: 'PageInfo';
  /** Cursor corresponding to the last node in edges. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** Whether more edges exist after to the defined set. */
  hasNextPage: Scalars['Boolean']['output'];
  /** Whether more edges exist prior to the defined set. */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** Cursor corresponding to the first node in edges. */
  startCursor?: Maybe<Scalars['String']['output']>;
  totalCount: Scalars['NonNegativeInt']['output'];
};

export type GqlPaginateDirectiveDefaults = {
  itemsPerPage?: InputMaybe<Scalars['NonNegativeInt']['input']>;
};

export type GqlQuery = {
  __typename?: 'Query';
  /** Queries available to authenticated admin user. */
  admin?: Maybe<GqlAdminQuery>;
  hello?: Maybe<Scalars['String']['output']>;
  /** Queries available to authenticated user. */
  me?: Maybe<GqlMeQuery>;
};

export type GqlUser = {
  __typename?: 'User';
  email: Scalars['EmailAddress']['output'];
  firstName?: Maybe<Scalars['String']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  userId: Scalars['String']['output'];
  userRoles: Array<GqlUserRoleType>;
  userSettings: GqlUserSettings;
};

export enum GqlUserRoleType {
  Admin = 'ADMIN'
}

export type GqlUserSettings = {
  __typename?: 'UserSettings';
  testVal: Scalars['Int']['output'];
  userId: Scalars['String']['output'];
};

export type GqlUserSettingsUpdateInput = {
  testVal?: InputMaybe<Scalars['Int']['input']>;
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info?: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info?: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info?: GraphQLResolveInfo
) => TResult | Promise<TResult>;


/** Mapping of interface types */
export type GqlResolversInterfaceTypes<RefType extends Record<string, unknown>> = {
  Connection: never;
  Edge: never;
};

/** Mapping between all available schema types and the resolvers types */
export type GqlResolversTypes = {
  AccountNumber: ResolverTypeWrapper<Partial<Scalars['AccountNumber']['output']>>;
  AdminMutation: ResolverTypeWrapper<Partial<GqlAdminMutation>>;
  AdminQuery: ResolverTypeWrapper<Partial<GqlAdminQuery>>;
  BigInt: ResolverTypeWrapper<Partial<Scalars['BigInt']['output']>>;
  Boolean: ResolverTypeWrapper<Partial<Scalars['Boolean']['output']>>;
  Byte: ResolverTypeWrapper<Partial<Scalars['Byte']['output']>>;
  Connection: ResolverTypeWrapper<GqlResolversInterfaceTypes<GqlResolversTypes>['Connection']>;
  CountryCode: ResolverTypeWrapper<Partial<Scalars['CountryCode']['output']>>;
  Cuid: ResolverTypeWrapper<Partial<Scalars['Cuid']['output']>>;
  Currency: ResolverTypeWrapper<Partial<Scalars['Currency']['output']>>;
  DID: ResolverTypeWrapper<Partial<Scalars['DID']['output']>>;
  Date: ResolverTypeWrapper<Partial<Scalars['Date']['output']>>;
  DateTime: ResolverTypeWrapper<Partial<Scalars['DateTime']['output']>>;
  DateTimeISO: ResolverTypeWrapper<Partial<Scalars['DateTimeISO']['output']>>;
  DeweyDecimal: ResolverTypeWrapper<Partial<Scalars['DeweyDecimal']['output']>>;
  Duration: ResolverTypeWrapper<Partial<Scalars['Duration']['output']>>;
  Edge: ResolverTypeWrapper<GqlResolversInterfaceTypes<GqlResolversTypes>['Edge']>;
  EmailAddress: ResolverTypeWrapper<Partial<Scalars['EmailAddress']['output']>>;
  GUID: ResolverTypeWrapper<Partial<Scalars['GUID']['output']>>;
  HSL: ResolverTypeWrapper<Partial<Scalars['HSL']['output']>>;
  HSLA: ResolverTypeWrapper<Partial<Scalars['HSLA']['output']>>;
  HexColorCode: ResolverTypeWrapper<Partial<Scalars['HexColorCode']['output']>>;
  Hexadecimal: ResolverTypeWrapper<Partial<Scalars['Hexadecimal']['output']>>;
  IBAN: ResolverTypeWrapper<Partial<Scalars['IBAN']['output']>>;
  IP: ResolverTypeWrapper<Partial<Scalars['IP']['output']>>;
  IPCPatent: ResolverTypeWrapper<Partial<Scalars['IPCPatent']['output']>>;
  IPv4: ResolverTypeWrapper<Partial<Scalars['IPv4']['output']>>;
  IPv6: ResolverTypeWrapper<Partial<Scalars['IPv6']['output']>>;
  ISBN: ResolverTypeWrapper<Partial<Scalars['ISBN']['output']>>;
  ISO8601Duration: ResolverTypeWrapper<Partial<Scalars['ISO8601Duration']['output']>>;
  Int: ResolverTypeWrapper<Partial<Scalars['Int']['output']>>;
  JSON: ResolverTypeWrapper<Partial<Scalars['JSON']['output']>>;
  JSONObject: ResolverTypeWrapper<Partial<Scalars['JSONObject']['output']>>;
  JWT: ResolverTypeWrapper<Partial<Scalars['JWT']['output']>>;
  LCCSubclass: ResolverTypeWrapper<Partial<Scalars['LCCSubclass']['output']>>;
  Latitude: ResolverTypeWrapper<Partial<Scalars['Latitude']['output']>>;
  LocalDate: ResolverTypeWrapper<Partial<Scalars['LocalDate']['output']>>;
  LocalDateTime: ResolverTypeWrapper<Partial<Scalars['LocalDateTime']['output']>>;
  LocalEndTime: ResolverTypeWrapper<Partial<Scalars['LocalEndTime']['output']>>;
  LocalTime: ResolverTypeWrapper<Partial<Scalars['LocalTime']['output']>>;
  Locale: ResolverTypeWrapper<Partial<Scalars['Locale']['output']>>;
  Long: ResolverTypeWrapper<Partial<Scalars['Long']['output']>>;
  Longitude: ResolverTypeWrapper<Partial<Scalars['Longitude']['output']>>;
  MAC: ResolverTypeWrapper<Partial<Scalars['MAC']['output']>>;
  MeMutation: ResolverTypeWrapper<Partial<GqlMeMutation>>;
  MeQuery: ResolverTypeWrapper<Partial<GqlMeQuery>>;
  Mutation: ResolverTypeWrapper<{}>;
  NegativeFloat: ResolverTypeWrapper<Partial<Scalars['NegativeFloat']['output']>>;
  NegativeInt: ResolverTypeWrapper<Partial<Scalars['NegativeInt']['output']>>;
  NonEmptyString: ResolverTypeWrapper<Partial<Scalars['NonEmptyString']['output']>>;
  NonNegativeFloat: ResolverTypeWrapper<Partial<Scalars['NonNegativeFloat']['output']>>;
  NonNegativeInt: ResolverTypeWrapper<Partial<Scalars['NonNegativeInt']['output']>>;
  NonPositiveFloat: ResolverTypeWrapper<Partial<Scalars['NonPositiveFloat']['output']>>;
  NonPositiveInt: ResolverTypeWrapper<Partial<Scalars['NonPositiveInt']['output']>>;
  ObjectID: ResolverTypeWrapper<Partial<Scalars['ObjectID']['output']>>;
  PageInfo: ResolverTypeWrapper<Partial<GqlPageInfo>>;
  PaginateDirectiveDefaults: ResolverTypeWrapper<Partial<GqlPaginateDirectiveDefaults>>;
  PhoneNumber: ResolverTypeWrapper<Partial<Scalars['PhoneNumber']['output']>>;
  Port: ResolverTypeWrapper<Partial<Scalars['Port']['output']>>;
  PositiveFloat: ResolverTypeWrapper<Partial<Scalars['PositiveFloat']['output']>>;
  PositiveInt: ResolverTypeWrapper<Partial<Scalars['PositiveInt']['output']>>;
  PostalCode: ResolverTypeWrapper<Partial<Scalars['PostalCode']['output']>>;
  Query: ResolverTypeWrapper<{}>;
  RGB: ResolverTypeWrapper<Partial<Scalars['RGB']['output']>>;
  RGBA: ResolverTypeWrapper<Partial<Scalars['RGBA']['output']>>;
  RoutingNumber: ResolverTypeWrapper<Partial<Scalars['RoutingNumber']['output']>>;
  SafeInt: ResolverTypeWrapper<Partial<Scalars['SafeInt']['output']>>;
  SemVer: ResolverTypeWrapper<Partial<Scalars['SemVer']['output']>>;
  String: ResolverTypeWrapper<Partial<Scalars['String']['output']>>;
  Time: ResolverTypeWrapper<Partial<Scalars['Time']['output']>>;
  TimeZone: ResolverTypeWrapper<Partial<Scalars['TimeZone']['output']>>;
  Timestamp: ResolverTypeWrapper<Partial<Scalars['Timestamp']['output']>>;
  URL: ResolverTypeWrapper<Partial<Scalars['URL']['output']>>;
  USCurrency: ResolverTypeWrapper<Partial<Scalars['USCurrency']['output']>>;
  UUID: ResolverTypeWrapper<Partial<Scalars['UUID']['output']>>;
  UnsignedFloat: ResolverTypeWrapper<Partial<Scalars['UnsignedFloat']['output']>>;
  UnsignedInt: ResolverTypeWrapper<Partial<Scalars['UnsignedInt']['output']>>;
  User: ResolverTypeWrapper<Partial<GqlUser>>;
  UserRoleType: ResolverTypeWrapper<Partial<GqlUserRoleType>>;
  UserSettings: ResolverTypeWrapper<Partial<GqlUserSettings>>;
  UserSettingsUpdateInput: ResolverTypeWrapper<Partial<GqlUserSettingsUpdateInput>>;
  UtcOffset: ResolverTypeWrapper<Partial<Scalars['UtcOffset']['output']>>;
  Void: ResolverTypeWrapper<Partial<Scalars['Void']['output']>>;
};

/** Mapping between all available schema types and the resolvers parents */
export type GqlResolversParentTypes = {
  AccountNumber: Partial<Scalars['AccountNumber']['output']>;
  AdminMutation: Partial<GqlAdminMutation>;
  AdminQuery: Partial<GqlAdminQuery>;
  BigInt: Partial<Scalars['BigInt']['output']>;
  Boolean: Partial<Scalars['Boolean']['output']>;
  Byte: Partial<Scalars['Byte']['output']>;
  Connection: GqlResolversInterfaceTypes<GqlResolversParentTypes>['Connection'];
  CountryCode: Partial<Scalars['CountryCode']['output']>;
  Cuid: Partial<Scalars['Cuid']['output']>;
  Currency: Partial<Scalars['Currency']['output']>;
  DID: Partial<Scalars['DID']['output']>;
  Date: Partial<Scalars['Date']['output']>;
  DateTime: Partial<Scalars['DateTime']['output']>;
  DateTimeISO: Partial<Scalars['DateTimeISO']['output']>;
  DeweyDecimal: Partial<Scalars['DeweyDecimal']['output']>;
  Duration: Partial<Scalars['Duration']['output']>;
  Edge: GqlResolversInterfaceTypes<GqlResolversParentTypes>['Edge'];
  EmailAddress: Partial<Scalars['EmailAddress']['output']>;
  GUID: Partial<Scalars['GUID']['output']>;
  HSL: Partial<Scalars['HSL']['output']>;
  HSLA: Partial<Scalars['HSLA']['output']>;
  HexColorCode: Partial<Scalars['HexColorCode']['output']>;
  Hexadecimal: Partial<Scalars['Hexadecimal']['output']>;
  IBAN: Partial<Scalars['IBAN']['output']>;
  IP: Partial<Scalars['IP']['output']>;
  IPCPatent: Partial<Scalars['IPCPatent']['output']>;
  IPv4: Partial<Scalars['IPv4']['output']>;
  IPv6: Partial<Scalars['IPv6']['output']>;
  ISBN: Partial<Scalars['ISBN']['output']>;
  ISO8601Duration: Partial<Scalars['ISO8601Duration']['output']>;
  Int: Partial<Scalars['Int']['output']>;
  JSON: Partial<Scalars['JSON']['output']>;
  JSONObject: Partial<Scalars['JSONObject']['output']>;
  JWT: Partial<Scalars['JWT']['output']>;
  LCCSubclass: Partial<Scalars['LCCSubclass']['output']>;
  Latitude: Partial<Scalars['Latitude']['output']>;
  LocalDate: Partial<Scalars['LocalDate']['output']>;
  LocalDateTime: Partial<Scalars['LocalDateTime']['output']>;
  LocalEndTime: Partial<Scalars['LocalEndTime']['output']>;
  LocalTime: Partial<Scalars['LocalTime']['output']>;
  Locale: Partial<Scalars['Locale']['output']>;
  Long: Partial<Scalars['Long']['output']>;
  Longitude: Partial<Scalars['Longitude']['output']>;
  MAC: Partial<Scalars['MAC']['output']>;
  MeMutation: Partial<GqlMeMutation>;
  MeQuery: Partial<GqlMeQuery>;
  Mutation: {};
  NegativeFloat: Partial<Scalars['NegativeFloat']['output']>;
  NegativeInt: Partial<Scalars['NegativeInt']['output']>;
  NonEmptyString: Partial<Scalars['NonEmptyString']['output']>;
  NonNegativeFloat: Partial<Scalars['NonNegativeFloat']['output']>;
  NonNegativeInt: Partial<Scalars['NonNegativeInt']['output']>;
  NonPositiveFloat: Partial<Scalars['NonPositiveFloat']['output']>;
  NonPositiveInt: Partial<Scalars['NonPositiveInt']['output']>;
  ObjectID: Partial<Scalars['ObjectID']['output']>;
  PageInfo: Partial<GqlPageInfo>;
  PaginateDirectiveDefaults: Partial<GqlPaginateDirectiveDefaults>;
  PhoneNumber: Partial<Scalars['PhoneNumber']['output']>;
  Port: Partial<Scalars['Port']['output']>;
  PositiveFloat: Partial<Scalars['PositiveFloat']['output']>;
  PositiveInt: Partial<Scalars['PositiveInt']['output']>;
  PostalCode: Partial<Scalars['PostalCode']['output']>;
  Query: {};
  RGB: Partial<Scalars['RGB']['output']>;
  RGBA: Partial<Scalars['RGBA']['output']>;
  RoutingNumber: Partial<Scalars['RoutingNumber']['output']>;
  SafeInt: Partial<Scalars['SafeInt']['output']>;
  SemVer: Partial<Scalars['SemVer']['output']>;
  String: Partial<Scalars['String']['output']>;
  Time: Partial<Scalars['Time']['output']>;
  TimeZone: Partial<Scalars['TimeZone']['output']>;
  Timestamp: Partial<Scalars['Timestamp']['output']>;
  URL: Partial<Scalars['URL']['output']>;
  USCurrency: Partial<Scalars['USCurrency']['output']>;
  UUID: Partial<Scalars['UUID']['output']>;
  UnsignedFloat: Partial<Scalars['UnsignedFloat']['output']>;
  UnsignedInt: Partial<Scalars['UnsignedInt']['output']>;
  User: Partial<GqlUser>;
  UserSettings: Partial<GqlUserSettings>;
  UserSettingsUpdateInput: Partial<GqlUserSettingsUpdateInput>;
  UtcOffset: Partial<Scalars['UtcOffset']['output']>;
  Void: Partial<Scalars['Void']['output']>;
};

export type GqlAuthDirectiveArgs = {
  roles?: Maybe<Array<GqlUserRoleType>>;
};

export type GqlAuthDirectiveResolver<Result, Parent, ContextType = ResolverContext, Args = GqlAuthDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type GqlInheritsDirectiveArgs = {
  types: Array<Scalars['String']['input']>;
};

export type GqlInheritsDirectiveResolver<Result, Parent, ContextType = ResolverContext, Args = GqlInheritsDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type GqlPaginateDirectiveArgs = {
  defaults?: Maybe<GqlPaginateDirectiveDefaults>;
  edgeType?: Maybe<Scalars['String']['input']>;
};

export type GqlPaginateDirectiveResolver<Result, Parent, ContextType = ResolverContext, Args = GqlPaginateDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export interface GqlAccountNumberScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['AccountNumber'], any> {
  name: 'AccountNumber';
}

export type GqlAdminMutationResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['AdminMutation'] = GqlResolversParentTypes['AdminMutation']> = {
  hello?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlAdminQueryResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['AdminQuery'] = GqlResolversParentTypes['AdminQuery']> = {
  hello?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface GqlBigIntScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['BigInt'], any> {
  name: 'BigInt';
}

export interface GqlByteScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Byte'], any> {
  name: 'Byte';
}

export type GqlConnectionResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['Connection'] = GqlResolversParentTypes['Connection']> = {
  __resolveType: TypeResolveFn<null, ParentType, ContextType>;
  edges?: Resolver<Array<GqlResolversTypes['Edge']>, ParentType, ContextType>;
  pageInfo?: Resolver<GqlResolversTypes['PageInfo'], ParentType, ContextType>;
};

export interface GqlCountryCodeScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['CountryCode'], any> {
  name: 'CountryCode';
}

export interface GqlCuidScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Cuid'], any> {
  name: 'Cuid';
}

export interface GqlCurrencyScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Currency'], any> {
  name: 'Currency';
}

export interface GqlDidScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['DID'], any> {
  name: 'DID';
}

export interface GqlDateScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Date'], any> {
  name: 'Date';
}

export interface GqlDateTimeScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['DateTime'], any> {
  name: 'DateTime';
}

export interface GqlDateTimeIsoScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['DateTimeISO'], any> {
  name: 'DateTimeISO';
}

export interface GqlDeweyDecimalScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['DeweyDecimal'], any> {
  name: 'DeweyDecimal';
}

export interface GqlDurationScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Duration'], any> {
  name: 'Duration';
}

export type GqlEdgeResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['Edge'] = GqlResolversParentTypes['Edge']> = {
  __resolveType: TypeResolveFn<null, ParentType, ContextType>;
  cursor?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
};

export interface GqlEmailAddressScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['EmailAddress'], any> {
  name: 'EmailAddress';
}

export interface GqlGuidScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['GUID'], any> {
  name: 'GUID';
}

export interface GqlHslScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['HSL'], any> {
  name: 'HSL';
}

export interface GqlHslaScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['HSLA'], any> {
  name: 'HSLA';
}

export interface GqlHexColorCodeScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['HexColorCode'], any> {
  name: 'HexColorCode';
}

export interface GqlHexadecimalScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Hexadecimal'], any> {
  name: 'Hexadecimal';
}

export interface GqlIbanScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['IBAN'], any> {
  name: 'IBAN';
}

export interface GqlIpScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['IP'], any> {
  name: 'IP';
}

export interface GqlIpcPatentScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['IPCPatent'], any> {
  name: 'IPCPatent';
}

export interface GqlIPv4ScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['IPv4'], any> {
  name: 'IPv4';
}

export interface GqlIPv6ScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['IPv6'], any> {
  name: 'IPv6';
}

export interface GqlIsbnScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['ISBN'], any> {
  name: 'ISBN';
}

export interface GqlIso8601DurationScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['ISO8601Duration'], any> {
  name: 'ISO8601Duration';
}

export interface GqlJsonScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['JSON'], any> {
  name: 'JSON';
}

export interface GqlJsonObjectScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['JSONObject'], any> {
  name: 'JSONObject';
}

export interface GqlJwtScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['JWT'], any> {
  name: 'JWT';
}

export interface GqlLccSubclassScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['LCCSubclass'], any> {
  name: 'LCCSubclass';
}

export interface GqlLatitudeScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Latitude'], any> {
  name: 'Latitude';
}

export interface GqlLocalDateScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['LocalDate'], any> {
  name: 'LocalDate';
}

export interface GqlLocalDateTimeScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['LocalDateTime'], any> {
  name: 'LocalDateTime';
}

export interface GqlLocalEndTimeScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['LocalEndTime'], any> {
  name: 'LocalEndTime';
}

export interface GqlLocalTimeScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['LocalTime'], any> {
  name: 'LocalTime';
}

export interface GqlLocaleScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Locale'], any> {
  name: 'Locale';
}

export interface GqlLongScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Long'], any> {
  name: 'Long';
}

export interface GqlLongitudeScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Longitude'], any> {
  name: 'Longitude';
}

export interface GqlMacScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['MAC'], any> {
  name: 'MAC';
}

export type GqlMeMutationResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['MeMutation'] = GqlResolversParentTypes['MeMutation']> = {
  hello?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  updateUserSettings?: Resolver<Maybe<GqlResolversTypes['UserSettings']>, ParentType, ContextType, RequireFields<GqlMeMutationUpdateUserSettingsArgs, 'userSettings'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlMeQueryResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['MeQuery'] = GqlResolversParentTypes['MeQuery']> = {
  hello?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  user?: Resolver<Maybe<GqlResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlMutationResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['Mutation'] = GqlResolversParentTypes['Mutation']> = {
  admin?: Resolver<Maybe<GqlResolversTypes['AdminMutation']>, ParentType, ContextType>;
  hello?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  me?: Resolver<Maybe<GqlResolversTypes['MeMutation']>, ParentType, ContextType>;
};

export interface GqlNegativeFloatScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['NegativeFloat'], any> {
  name: 'NegativeFloat';
}

export interface GqlNegativeIntScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['NegativeInt'], any> {
  name: 'NegativeInt';
}

export interface GqlNonEmptyStringScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['NonEmptyString'], any> {
  name: 'NonEmptyString';
}

export interface GqlNonNegativeFloatScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['NonNegativeFloat'], any> {
  name: 'NonNegativeFloat';
}

export interface GqlNonNegativeIntScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['NonNegativeInt'], any> {
  name: 'NonNegativeInt';
}

export interface GqlNonPositiveFloatScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['NonPositiveFloat'], any> {
  name: 'NonPositiveFloat';
}

export interface GqlNonPositiveIntScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['NonPositiveInt'], any> {
  name: 'NonPositiveInt';
}

export interface GqlObjectIdScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['ObjectID'], any> {
  name: 'ObjectID';
}

export type GqlPageInfoResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['PageInfo'] = GqlResolversParentTypes['PageInfo']> = {
  endCursor?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  hasNextPage?: Resolver<GqlResolversTypes['Boolean'], ParentType, ContextType>;
  hasPreviousPage?: Resolver<GqlResolversTypes['Boolean'], ParentType, ContextType>;
  startCursor?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  totalCount?: Resolver<GqlResolversTypes['NonNegativeInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface GqlPhoneNumberScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['PhoneNumber'], any> {
  name: 'PhoneNumber';
}

export interface GqlPortScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Port'], any> {
  name: 'Port';
}

export interface GqlPositiveFloatScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['PositiveFloat'], any> {
  name: 'PositiveFloat';
}

export interface GqlPositiveIntScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['PositiveInt'], any> {
  name: 'PositiveInt';
}

export interface GqlPostalCodeScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['PostalCode'], any> {
  name: 'PostalCode';
}

export type GqlQueryResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['Query'] = GqlResolversParentTypes['Query']> = {
  admin?: Resolver<Maybe<GqlResolversTypes['AdminQuery']>, ParentType, ContextType>;
  hello?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  me?: Resolver<Maybe<GqlResolversTypes['MeQuery']>, ParentType, ContextType>;
};

export interface GqlRgbScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['RGB'], any> {
  name: 'RGB';
}

export interface GqlRgbaScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['RGBA'], any> {
  name: 'RGBA';
}

export interface GqlRoutingNumberScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['RoutingNumber'], any> {
  name: 'RoutingNumber';
}

export interface GqlSafeIntScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['SafeInt'], any> {
  name: 'SafeInt';
}

export interface GqlSemVerScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['SemVer'], any> {
  name: 'SemVer';
}

export interface GqlTimeScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Time'], any> {
  name: 'Time';
}

export interface GqlTimeZoneScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['TimeZone'], any> {
  name: 'TimeZone';
}

export interface GqlTimestampScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Timestamp'], any> {
  name: 'Timestamp';
}

export interface GqlUrlScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['URL'], any> {
  name: 'URL';
}

export interface GqlUsCurrencyScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['USCurrency'], any> {
  name: 'USCurrency';
}

export interface GqlUuidScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['UUID'], any> {
  name: 'UUID';
}

export interface GqlUnsignedFloatScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['UnsignedFloat'], any> {
  name: 'UnsignedFloat';
}

export interface GqlUnsignedIntScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['UnsignedInt'], any> {
  name: 'UnsignedInt';
}

export type GqlUserResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['User'] = GqlResolversParentTypes['User']> = {
  email?: Resolver<GqlResolversTypes['EmailAddress'], ParentType, ContextType>;
  firstName?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<GqlResolversTypes['String']>, ParentType, ContextType>;
  userId?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  userRoles?: Resolver<Array<GqlResolversTypes['UserRoleType']>, ParentType, ContextType>;
  userSettings?: Resolver<GqlResolversTypes['UserSettings'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GqlUserSettingsResolvers<ContextType = ResolverContext, ParentType extends GqlResolversParentTypes['UserSettings'] = GqlResolversParentTypes['UserSettings']> = {
  testVal?: Resolver<GqlResolversTypes['Int'], ParentType, ContextType>;
  userId?: Resolver<GqlResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface GqlUtcOffsetScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['UtcOffset'], any> {
  name: 'UtcOffset';
}

export interface GqlVoidScalarConfig extends GraphQLScalarTypeConfig<GqlResolversTypes['Void'], any> {
  name: 'Void';
}

export type GqlResolvers<ContextType = ResolverContext> = {
  AccountNumber?: GraphQLScalarType;
  AdminMutation?: GqlAdminMutationResolvers<ContextType>;
  AdminQuery?: GqlAdminQueryResolvers<ContextType>;
  BigInt?: GraphQLScalarType;
  Byte?: GraphQLScalarType;
  Connection?: GqlConnectionResolvers<ContextType>;
  CountryCode?: GraphQLScalarType;
  Cuid?: GraphQLScalarType;
  Currency?: GraphQLScalarType;
  DID?: GraphQLScalarType;
  Date?: GraphQLScalarType;
  DateTime?: GraphQLScalarType;
  DateTimeISO?: GraphQLScalarType;
  DeweyDecimal?: GraphQLScalarType;
  Duration?: GraphQLScalarType;
  Edge?: GqlEdgeResolvers<ContextType>;
  EmailAddress?: GraphQLScalarType;
  GUID?: GraphQLScalarType;
  HSL?: GraphQLScalarType;
  HSLA?: GraphQLScalarType;
  HexColorCode?: GraphQLScalarType;
  Hexadecimal?: GraphQLScalarType;
  IBAN?: GraphQLScalarType;
  IP?: GraphQLScalarType;
  IPCPatent?: GraphQLScalarType;
  IPv4?: GraphQLScalarType;
  IPv6?: GraphQLScalarType;
  ISBN?: GraphQLScalarType;
  ISO8601Duration?: GraphQLScalarType;
  JSON?: GraphQLScalarType;
  JSONObject?: GraphQLScalarType;
  JWT?: GraphQLScalarType;
  LCCSubclass?: GraphQLScalarType;
  Latitude?: GraphQLScalarType;
  LocalDate?: GraphQLScalarType;
  LocalDateTime?: GraphQLScalarType;
  LocalEndTime?: GraphQLScalarType;
  LocalTime?: GraphQLScalarType;
  Locale?: GraphQLScalarType;
  Long?: GraphQLScalarType;
  Longitude?: GraphQLScalarType;
  MAC?: GraphQLScalarType;
  MeMutation?: GqlMeMutationResolvers<ContextType>;
  MeQuery?: GqlMeQueryResolvers<ContextType>;
  Mutation?: GqlMutationResolvers<ContextType>;
  NegativeFloat?: GraphQLScalarType;
  NegativeInt?: GraphQLScalarType;
  NonEmptyString?: GraphQLScalarType;
  NonNegativeFloat?: GraphQLScalarType;
  NonNegativeInt?: GraphQLScalarType;
  NonPositiveFloat?: GraphQLScalarType;
  NonPositiveInt?: GraphQLScalarType;
  ObjectID?: GraphQLScalarType;
  PageInfo?: GqlPageInfoResolvers<ContextType>;
  PhoneNumber?: GraphQLScalarType;
  Port?: GraphQLScalarType;
  PositiveFloat?: GraphQLScalarType;
  PositiveInt?: GraphQLScalarType;
  PostalCode?: GraphQLScalarType;
  Query?: GqlQueryResolvers<ContextType>;
  RGB?: GraphQLScalarType;
  RGBA?: GraphQLScalarType;
  RoutingNumber?: GraphQLScalarType;
  SafeInt?: GraphQLScalarType;
  SemVer?: GraphQLScalarType;
  Time?: GraphQLScalarType;
  TimeZone?: GraphQLScalarType;
  Timestamp?: GraphQLScalarType;
  URL?: GraphQLScalarType;
  USCurrency?: GraphQLScalarType;
  UUID?: GraphQLScalarType;
  UnsignedFloat?: GraphQLScalarType;
  UnsignedInt?: GraphQLScalarType;
  User?: GqlUserResolvers<ContextType>;
  UserSettings?: GqlUserSettingsResolvers<ContextType>;
  UtcOffset?: GraphQLScalarType;
  Void?: GraphQLScalarType;
};

export type GqlDirectiveResolvers<ContextType = ResolverContext> = {
  auth?: GqlAuthDirectiveResolver<any, any, ContextType>;
  inherits?: GqlInheritsDirectiveResolver<any, any, ContextType>;
  paginate?: GqlPaginateDirectiveResolver<any, any, ContextType>;
};

// Generated on 2023-06-15T22:35:08+02:00
