# See original blog post
# https://medium.com/@vitalypanukhin/docker-compose-and-gitlab-b209d09210f6
#
# NOTE: Don't worry, it can take a few days really understand this file,
#       as you need to understand:
#         - gitlab-ci.yml (+ its workers and env)
#         - ssh + private/public keys
#         - docker compose + containers
#         - provisioninng computing units from cloud providers like AWS, GCP, DigitalOcean, ...
#
# Find more about .gitlab-ci.yml
# https://docs.gitlab.com/ee/ci/yaml/gitlab_ci_yaml.html
#
# Authentication:
# Note on the "user" that authenticates with docker and pushes
# the image to repository:
#
# - Original blog post named it `gitlab-ci-token`, which is how
#   they named the Deploy Token. However, in the screenshot in
#   the blog post, the token doesn't have correct permissions.
#
# - I assume the Deploy Token needs both `read_registry` and
#   `write_registry`, because:
#   1) We push to registry on build and release jobs
#   2) We pull from the registry on stage/prod deploys
#
# - There are several types of deploy tokens / auth methods.
#   we use the fact that if deploy token is called `gitlab-deploy-token`,
#   then in CI the env vars CI_DEPLOY_USER and CI_DEPLOY_PASSWORD
#   are populated with its info.
#
# Learn more:
# - https://docs.gitlab.com/ee/user/project/deploy_tokens/index.html#gitlab-deploy-token
# - https://docs.gitlab.com/ee/user/packages/container_registry/authenticate_with_container_registry.html
# - https://docs.gitlab.com/ee/ci/jobs/ci_job_token.html
#
# Troubleshooting
# - SSH
#   - https://stackoverflow.com/questions/1405324
#   - https://serverfault.com/questions/638628
#   - https://pentestmonkey.net/blog/ssh-with-no-tty
# - SSH + docker-compose
#   - NOTE: using `docker-compose -H "ssh://...` did not work
#   - https://stackoverflow.com/questions/66548612
#   - https://github.com/docker/compose/issues/9852
#   - https://stackoverflow.com/questions/4135261/paramiko-authenticationexception-issue

########################
# 1. SETUP
########################

services:
  ## See https://forum.gitlab.com/t/why-services-docker-dind-is-needed-while-already-having-image-docker/43534
  - docker:dind

variables:
  # SERVER_IP_STAGE: 10.10.10.1
  SERVER_IP_PROD: 209.38.245.244 # DigitalOcean droplet IP
  # SERVER_USER_STAGE: gitlab
  SERVER_USER_PROD: gitlab
  ## Tags used for deployment
  ## E.g. registry.gitlab.com/yodese/yodese-site/server-dev:latest
  SERVER_TAG_LATEST: $CI_REGISTRY_IMAGE/server-$CI_COMMIT_REF_NAME:latest
  ## E.g. registry.gitlab.com/yodese/yodese-site/server-dev:526490c1
  SERVER_TAG_COMMIT: $CI_REGISTRY_IMAGE/server-$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  ## E.g. registry.gitlab.com/yodese/yodese-site/server-dev:latest
  CRON_TAG_LATEST: $CI_REGISTRY_IMAGE/cron-$CI_COMMIT_REF_NAME:latest
  ## E.g. registry.gitlab.com/yodese/yodese-site/server-dev:526490c1
  CRON_TAG_COMMIT: $CI_REGISTRY_IMAGE/cron-$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

stages:
  - test
  # - build-stg
  # - deploy-stg
  - build-prod
  - deploy-prod

########################
# 2.1 TEST JOBS
########################

# Test that we can establish connection to servers

# server-ssh-stg:
#   stage: test
#   only:
#     - staging
#   image: gotechnies/alpine-ssh
#   script:
#     - sh ./scripts/gitlab-ci.sh server-ssh-stg

server-ssh-prod:
  stage: test
  only:
    - main
  image: gotechnies/alpine-ssh
  script:
    - sh ./scripts/gitlab-ci.sh server-ssh-prod

# Test code

server-lint:
  stage: test
  only:
    - staging
    - main
    - dev
  image: node:18-alpine
  script:
    - sh ./scripts/gitlab-ci.sh server-lint

server-test-unit:
  stage: test
  only:
    - staging
    - main
    - dev
  image: node:18-alpine
  script:
    - sh ./scripts/gitlab-ci.sh server-test-unit

########################
# 2.2 STAGE DEPLOY JOBS
########################

# server-build-stg:
#   stage: build-stg
#   only:
#     - staging
#   image: docker:latest
#   script:
#     - sh ./scripts/gitlab-ci.sh server-build-stg

# server-deploy-stg:
#   stage: deploy-stg
#   only:
#     - staging
#   image: gotechnies/alpine-ssh
#   script:
#     - sh ./scripts/gitlab-ci.sh server-deploy-stg

# server-db-backup-stg:
#   stage: deploy-stg
#   only:
#     - staging
#   when: manual
#   image: gotechnies/alpine-ssh
#   script:
#     - sh ./scripts/gitlab-ci.sh server-db-backup-stg

## Triggered as a separate pipeline (which needs to be manually started too)
## to give users a chance to recover from accidental starts
# server-db-migrate-stg:
#   stage: deploy-stg
#   only:
#     - staging
#   when: manual
#   trigger:
#     include: .gitlab-ci/server-db-migrate.yml

## Triggered as a separate pipeline (which needs to be manually started too)
## to give users a chance to recover from accidental starts
# server-db-restore-stg:
#   stage: deploy-stg
#   only:
#     - staging
#   when: manual
#   trigger:
#     include: .gitlab-ci/server-db-restore.yml

########################
# 2.2 PROD DEPLOY JOBS
########################

server-build-prod:
  stage: build-prod
  only:
    - main
  image: docker:latest
  script:
    - sh ./scripts/gitlab-ci.sh server-build-prod

server-deploy-prod:
  stage: deploy-prod
  only:
    - main
  when: manual
  image: gotechnies/alpine-ssh
  script:
    - sh ./scripts/gitlab-ci.sh server-deploy-prod

server-db-backup-prod:
  stage: deploy-prod
  only:
    - main
  when: manual
  image: gotechnies/alpine-ssh
  script:
    - sh ./scripts/gitlab-ci.sh server-db-backup-prod

## Triggered as a separate pipeline (which needs to be manually started too)
## to give users a chance to recover from accidental starts
server-db-migrate-prod:
  stage: deploy-prod
  only:
    - main
  when: manual
  trigger:
    include: .gitlab-ci/server-db-migrate.yml

## Triggered as a separate pipeline (which needs to be manually started too)
## to give users a chance to recover from accidental starts
server-db-restore-prod:
  stage: deploy-prod
  only:
    - main
  when: manual
  trigger:
    include: .gitlab-ci/server-db-restore.yml
