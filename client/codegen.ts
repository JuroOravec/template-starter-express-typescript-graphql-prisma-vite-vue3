import type { CodegenConfig } from '@graphql-codegen/cli';
import type { AddPluginConfig } from '@graphql-codegen/add/typings/config';

import { customScalars } from '../server/codegen';

const autogenPrefix = `
/* eslint-disable */
/* This file is autogenerated, see codegen.ts */`;

const config = {
  overwrite: true,
  schema: ['../server/src/__generated__/graphql.schema.json'],
  documents: ['src/**/*.{ts,graphql}', '!src/__generated__/**/*.{ts,graphql}'],
  config: {
    typesPrefix: 'Gql',
    scalars: customScalars,
  },
  generates: {
    // Types and functions used in code
    'src/__generated__/graphql.ts': {
      plugins: [
        'typescript',
        'typescript-operations',
        'typescript-vue-apollo',
        'named-operations-object',
        'typescript-apollo-client-helpers',
        'time',
        { add: { content: autogenPrefix } satisfies AddPluginConfig },
      ],
      config: {
        withCompositionFunctions: true,
        vueCompositionApiImportFrom: 'vue',
        namingConvention: 'keep',
        useTypeImports: true,
      },
    },

    // Used for Apollo memory fragment matcher (use interfaces and unions defined on server)
    // See https://the-guild.dev/graphql/codegen/plugins/other/fragment-matcher
    'src/__generated__/graphqlPossibleTypes.ts': {
      plugins: [
        'fragment-matcher',
        'time',
        { add: { content: autogenPrefix } satisfies AddPluginConfig },
      ],
    },

    // Used for the apollo graphql VSCode extension
    'src/__generated__/graphql.schema.json': {
      plugins: ['introspection'],
    },
  },
} satisfies CodegenConfig;

export default config;
